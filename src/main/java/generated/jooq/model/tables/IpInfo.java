/*
 * This file is generated by jOOQ.
 */
package generated.jooq.model.tables;


import generated.jooq.model.Keys;
import generated.jooq.model.Public;
import generated.jooq.model.tables.records.IpInfoRecord;

import java.math.BigDecimal;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row13;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class IpInfo extends TableImpl<IpInfoRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.ip_info</code>
     */
    public static final IpInfo IP_INFO = new IpInfo();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<IpInfoRecord> getRecordType() {
        return IpInfoRecord.class;
    }

    /**
     * The column <code>public.ip_info.ip</code>.
     */
    public final TableField<IpInfoRecord, String> IP = createField(DSL.name("ip"), SQLDataType.VARCHAR(17).nullable(false), this, "");

    /**
     * The column <code>public.ip_info.country</code>.
     */
    public final TableField<IpInfoRecord, String> COUNTRY = createField(DSL.name("country"), SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>public.ip_info.countrycode</code>.
     */
    public final TableField<IpInfoRecord, String> COUNTRYCODE = createField(DSL.name("countrycode"), SQLDataType.VARCHAR(4), this, "");

    /**
     * The column <code>public.ip_info.region</code>.
     */
    public final TableField<IpInfoRecord, String> REGION = createField(DSL.name("region"), SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>public.ip_info.regionname</code>.
     */
    public final TableField<IpInfoRecord, String> REGIONNAME = createField(DSL.name("regionname"), SQLDataType.VARCHAR(200), this, "");

    /**
     * The column <code>public.ip_info.city</code>.
     */
    public final TableField<IpInfoRecord, String> CITY = createField(DSL.name("city"), SQLDataType.VARCHAR(100), this, "");

    /**
     * The column <code>public.ip_info.zip</code>.
     */
    public final TableField<IpInfoRecord, String> ZIP = createField(DSL.name("zip"), SQLDataType.VARCHAR(15), this, "");

    /**
     * The column <code>public.ip_info.lat</code>.
     */
    public final TableField<IpInfoRecord, BigDecimal> LAT = createField(DSL.name("lat"), SQLDataType.NUMERIC(14, 11), this, "");

    /**
     * The column <code>public.ip_info.lon</code>.
     */
    public final TableField<IpInfoRecord, BigDecimal> LON = createField(DSL.name("lon"), SQLDataType.NUMERIC(14, 11), this, "");

    /**
     * The column <code>public.ip_info.timezone</code>.
     */
    public final TableField<IpInfoRecord, String> TIMEZONE = createField(DSL.name("timezone"), SQLDataType.VARCHAR(100), this, "");

    /**
     * The column <code>public.ip_info.isp</code>.
     */
    public final TableField<IpInfoRecord, String> ISP = createField(DSL.name("isp"), SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.ip_info.org</code>.
     */
    public final TableField<IpInfoRecord, String> ORG = createField(DSL.name("org"), SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.ip_info.autonomous_system</code>.
     */
    public final TableField<IpInfoRecord, String> AUTONOMOUS_SYSTEM = createField(DSL.name("autonomous_system"), SQLDataType.VARCHAR, this, "");

    private IpInfo(Name alias, Table<IpInfoRecord> aliased) {
        this(alias, aliased, null);
    }

    private IpInfo(Name alias, Table<IpInfoRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.ip_info</code> table reference
     */
    public IpInfo(String alias) {
        this(DSL.name(alias), IP_INFO);
    }

    /**
     * Create an aliased <code>public.ip_info</code> table reference
     */
    public IpInfo(Name alias) {
        this(alias, IP_INFO);
    }

    /**
     * Create a <code>public.ip_info</code> table reference
     */
    public IpInfo() {
        this(DSL.name("ip_info"), null);
    }

    public <O extends Record> IpInfo(Table<O> child, ForeignKey<O, IpInfoRecord> key) {
        super(child, key, IP_INFO);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public UniqueKey<IpInfoRecord> getPrimaryKey() {
        return Keys.IP_INFO_PKEY;
    }

    @Override
    public List<UniqueKey<IpInfoRecord>> getKeys() {
        return Arrays.<UniqueKey<IpInfoRecord>>asList(Keys.IP_INFO_PKEY);
    }

    @Override
    public IpInfo as(String alias) {
        return new IpInfo(DSL.name(alias), this);
    }

    @Override
    public IpInfo as(Name alias) {
        return new IpInfo(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public IpInfo rename(String name) {
        return new IpInfo(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public IpInfo rename(Name name) {
        return new IpInfo(name, null);
    }

    // -------------------------------------------------------------------------
    // Row13 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row13<String, String, String, String, String, String, String, BigDecimal, BigDecimal, String, String, String, String> fieldsRow() {
        return (Row13) super.fieldsRow();
    }
}
