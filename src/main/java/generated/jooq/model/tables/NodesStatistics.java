/*
 * This file is generated by jOOQ.
 */
package generated.jooq.model.tables;


import generated.jooq.model.Keys;
import generated.jooq.model.Public;
import generated.jooq.model.tables.records.NodesStatisticsRecord;

import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row9;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class NodesStatistics extends TableImpl<NodesStatisticsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.nodes_statistics</code>
     */
    public static final NodesStatistics NODES_STATISTICS = new NodesStatistics();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<NodesStatisticsRecord> getRecordType() {
        return NodesStatisticsRecord.class;
    }

    /**
     * The column <code>public.nodes_statistics.ip</code>.
     */
    public final TableField<NodesStatisticsRecord, String> IP = createField(DSL.name("ip"), SQLDataType.VARCHAR(17).nullable(false), this, "");

    /**
     * The column <code>public.nodes_statistics.info_collected_on</code>.
     */
    public final TableField<NodesStatisticsRecord, OffsetDateTime> INFO_COLLECTED_ON = createField(DSL.name("info_collected_on"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false), this, "");

    /**
     * The column <code>public.nodes_statistics.miner</code>.
     */
    public final TableField<NodesStatisticsRecord, Boolean> MINER = createField(DSL.name("miner"), SQLDataType.BOOLEAN, this, "");

    /**
     * The column <code>public.nodes_statistics.syncing</code>.
     */
    public final TableField<NodesStatisticsRecord, Boolean> SYNCING = createField(DSL.name("syncing"), SQLDataType.BOOLEAN, this, "");

    /**
     * The column <code>public.nodes_statistics.launched</code>.
     */
    public final TableField<NodesStatisticsRecord, OffsetDateTime> LAUNCHED = createField(DSL.name("launched"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "");

    /**
     * The column <code>public.nodes_statistics.version</code>.
     */
    public final TableField<NodesStatisticsRecord, String> VERSION = createField(DSL.name("version"), SQLDataType.VARCHAR(30), this, "");

    /**
     * The column <code>public.nodes_statistics.not_reachable</code>.
     */
    public final TableField<NodesStatisticsRecord, Boolean> NOT_REACHABLE = createField(DSL.name("not_reachable"), SQLDataType.BOOLEAN, this, "");

    /**
     * The column <code>public.nodes_statistics.block_count</code>.
     */
    public final TableField<NodesStatisticsRecord, Double> BLOCK_COUNT = createField(DSL.name("block_count"), SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>public.nodes_statistics.node_type</code>.
     */
    public final TableField<NodesStatisticsRecord, String> NODE_TYPE = createField(DSL.name("node_type"), SQLDataType.VARCHAR(30), this, "");

    private NodesStatistics(Name alias, Table<NodesStatisticsRecord> aliased) {
        this(alias, aliased, null);
    }

    private NodesStatistics(Name alias, Table<NodesStatisticsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.nodes_statistics</code> table reference
     */
    public NodesStatistics(String alias) {
        this(DSL.name(alias), NODES_STATISTICS);
    }

    /**
     * Create an aliased <code>public.nodes_statistics</code> table reference
     */
    public NodesStatistics(Name alias) {
        this(alias, NODES_STATISTICS);
    }

    /**
     * Create a <code>public.nodes_statistics</code> table reference
     */
    public NodesStatistics() {
        this(DSL.name("nodes_statistics"), null);
    }

    public <O extends Record> NodesStatistics(Table<O> child, ForeignKey<O, NodesStatisticsRecord> key) {
        super(child, key, NODES_STATISTICS);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public UniqueKey<NodesStatisticsRecord> getPrimaryKey() {
        return Keys.NODES_STATISTICS_PKEY;
    }

    @Override
    public List<UniqueKey<NodesStatisticsRecord>> getKeys() {
        return Arrays.<UniqueKey<NodesStatisticsRecord>>asList(Keys.NODES_STATISTICS_PKEY);
    }

    @Override
    public NodesStatistics as(String alias) {
        return new NodesStatistics(DSL.name(alias), this);
    }

    @Override
    public NodesStatistics as(Name alias) {
        return new NodesStatistics(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public NodesStatistics rename(String name) {
        return new NodesStatistics(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public NodesStatistics rename(Name name) {
        return new NodesStatistics(name, null);
    }

    // -------------------------------------------------------------------------
    // Row9 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row9<String, OffsetDateTime, Boolean, Boolean, OffsetDateTime, String, Boolean, Double, String> fieldsRow() {
        return (Row9) super.fieldsRow();
    }
}
